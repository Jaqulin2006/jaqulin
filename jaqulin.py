# -*- coding: utf-8 -*-
"""jaqulin

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WXwD0BwizkSce6i9bCvOhibsgUHzA1aQ
"""

from transformers import pipeline

class CustomerSupportChatbot:
    def __init__(self):
        # Load a pre-trained conversational model
        self.chatbot = pipeline("conversational", model="microsoft/DialoGPT-medium")

    def chat(self):
        print("Welcome to Customer Support!")
        print("Type 'exit' to end the conversation.\n")

        conversation_history = []

        while True:
            user_input = input("You: ")
            if user_input.lower() == 'exit':
                print("Chatbot: Thank you for reaching out. Have a great day!")
                break

            # Process the user's input
            conversation_history.append(user_input)
            response = self.get_response(user_input)
            conversation_history.append(response)

            print(f"Chatbot: {response}")

    def get_response(self, user_input):
        # Generate a response using the chatbot model
        result = self.chatbot(user_input)
        return result[0]['generated_text']

if __name__ == "__main__":
    bot = CustomerSupportChatbot()
    bot.chat()

from transformers import pipeline, Conversation

class CustomerSupportChatbot:
    def __init__(self):
        # Load a pre-trained conversational model
        self.chatbot = pipeline("text-generation", model="microsoft/DialoGPT-medium")

    def chat(self):
        print("Welcome to Customer Support!")
        print("Type 'exit' to end the conversation.\n")

        conversation_history = []
        conversation = Conversation()

        while True:
            user_input = input("You: ")
            if user_input.lower() == 'exit':
                print("Chatbot: Thank you for reaching out. Have a great day!")
                break

            # Process the user's input
            conversation.add_user_input(user_input)
            response = self.get_response(conversation) # pass the conversation object
            conversation.append_response(response) # Update with the model response

            print(f"Chatbot: {response}")

    def get_response(self, conversation):
        # Generate a response using the chatbot model
        result = self.chatbot(conversation,  max_length=1000, pad_token_id=self.chatbot.tokenizer.eos_token_id)
        return result.generated_responses[-1]  # Get the last generated response


if __name__ == "__main__":
    bot = CustomerSupportChatbot()
    bot.chat()

from transformers import pipeline, GenerationConfig

class CustomerSupportChatbot:
    def __init__(self):
        # Load a pre-trained conversational model
        self.chatbot = pipeline("text-generation", model="microsoft/DialoGPT-medium")

    def chat(self):
        print("Welcome to Customer Support!")
        print("Type 'exit' to end the conversation.\n")

        conversation_history = []
        # Conversation is replaced with a list to store past interactions
        # conversation = Conversation()

        while True:
            user_input = input("You: ")